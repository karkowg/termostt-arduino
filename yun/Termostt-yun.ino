/*
* Master code
* (Arduino Yún)
*/
#include <IRremote.h>
#include <dht.h>
#include <SoftEasyTransfer.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <YunClient.h>
#include <PubSubClient.h>

#define RCV_PIN   3 // IR receiver
#define DHT_PIN  11 // DHT sensor
#define STT_PIN  13 // LED status
#define MODE_I    0 // mode idle
#define MODE_C    1 // mode capture infrared
#define MODE_M    2 // mode monitor
#define OFF       0
#define ON        1

//#define DEVMODE 1

char msg_buffer[100];
bool readDHT = true;
bool firstRead = true;
bool acOn = false;
double met = 58.2;
double clo = 1.0;
byte t_target;
byte t_ac;
byte t_now;
unsigned long update_timer;
unsigned long action_timer;

dht DHT;

// MQTT broker
//IPAddress server(192, 168, 2, 200);
IPAddress server(192, 168, 43, 147);
YunClient yunClient;
PubSubClient client(yunClient);

SoftwareSerial mySerial(5, 6);
SoftEasyTransfer ET;

IRrecv irrecv(RCV_PIN);
decode_results results;

struct SEND_DATA_STRUCTURE {
  byte type;
  byte temperature;
  byte len;
};
SEND_DATA_STRUCTURE IRsignal;

void setup() {
  Bridge.begin();
  Serial.begin(9600);
  mySerial.begin(9600);
  ET.begin(details(IRsignal), &mySerial);
  irrecv.enableIRIn(); // Start the receiver
  pinMode(STT_PIN, OUTPUT);
  client.setServer(server, 1883);
  client.setCallback(callback);
}

// Storage for the recorded code
byte codeType = 3; // The type of code
unsigned long codeValue; // The code value if not raw
unsigned int rawCodes[RAWBUF]; // The durations if raw
byte codeLen = 32; // The length of the code
byte toggle = 0; // The RC5/6 toggle state

// Monitorar
byte mode = MODE_I;
// Capturar infravermelho
//byte mode = MODE_C;

void loop() {
  if (!client.connected()) {
    client.connect("termostt-yun");
    client.subscribe("termostt/#");
  }

  switch (mode) {
    case MODE_I:
      turnLED(OFF, STT_PIN);
      readDHT = true;
      firstRead = true;
      if (acOn) turnAC(OFF, 18);
      break;
    case MODE_C:
      turnLED(OFF, STT_PIN);
      /* comentar linha para usar modo monitor */
      //recv();
      break;
    case MODE_M:
      turnLED(ON, STT_PIN);
      /* comentar linha para usar modo de captura de infravermelho */
      monitorAmbient();
      break;
  }

  // MQTT client loop
  client.loop();
}

void monitorAmbient() {
  if (readDHT) {
    DHT.read22(DHT_PIN);
    t_now = (byte) DHT.temperature;
    readDHT = false;
    if (firstRead) {
      t_target = setTarget();
      turnAC(ON, t_target);
      firstRead = false;
      #if defined(DEVMODE)
        Serial.println("-- FIRST READ target: " + String(t_target));
      #endif
    }
    updateAndroid();
  }
  // update android após 30s
  if (millis() > (update_timer + 30000)) {
    update_timer = millis();
    readDHT = true;
  }
  // após 2min, compara temperaturas e age de acordo
  if (millis() > (action_timer + 120000)) {
    action_timer = millis();
    thermalControl();
  }
}

byte setTarget() {
  double t = 18;
  double pmv_index;
  while (true) {
    pmv_index = calcPMV(t, DHT.humidity, met, clo);
    if (pmv_index > -0.3 || t > 29) {
      break;
    }
    else t++;
  }
  #if defined(DEVMODE)
    Serial.println("## SET TARGET tg_pmv: " + String(pmv_index));
    Serial.println("## SET TARGET target: " + String(t));
  #endif
  return (byte) t;
}

void thermalControl() {
  //byte t_now = (byte) DHT.temperature;
  if (t_now == t_target);
  else if (t_now > t_target) {
    coolAction();
  }
  else if (t_now < t_target) {
    heatAction();
  }
}

void coolAction() {
  //byte t_now = (byte) DHT.temperature;
  if (!acOn) turnAC(ON, t_target);
  
  if ((t_now - t_target) >= 2 && (t_target - t_ac) <= 2 && t_ac > 18) {
    setAC(t_ac-1);
  }
  else if ((t_now - t_target) < 2 && t_ac != t_target) {
    setAC(t_target);
  }
}

void heatAction() {
  //byte t_now = (byte) DHT.temperature;
  if (!acOn) turnAC(ON, t_target);
  
  if ((t_target - t_now) >= 2 && (t_ac - t_target) <= 2 && t_ac < 30) {
    setAC(t_ac+1);
  }
  else if ((t_target - t_now) < 2 && t_ac != t_target) {
    setAC(t_target);
  }
}

void turnAC(byte state, byte temperature) {
  unsigned long timer = millis();
  if (state == ON) {
    sendCode(17);
    acOn = true;
    // delay 5s até ligar dispositivo
    while (millis() < (timer + 5000));
    setAC(temperature);
  }
  else {
    setAC(temperature);
    // delay 5s antes de desligar dispositivo
    while (millis() < (timer + 5000));
    sendCode(31);
    acOn = false;
  }
}

void setAC(byte temperature) {
  t_ac = temperature;
  sendCode(t_ac);
  updateAndroid();
}

void updateAndroid() {
  String pub_str;
  pub_str = String(DHT.temperature);
  pub_str.toCharArray(msg_buffer, pub_str.length() + 1);
  client.publish("termostt/status/temperature/now", msg_buffer);

  pub_str = String(t_target);
  pub_str.toCharArray(msg_buffer, pub_str.length() + 1);
  client.publish("termostt/status/temperature/target", msg_buffer);

  pub_str = String(t_ac);
  pub_str.toCharArray(msg_buffer, pub_str.length() + 1);
  client.publish("termostt/status/temperature/ac", msg_buffer);

  pub_str = String(DHT.humidity);
  pub_str.toCharArray(msg_buffer, pub_str.length() + 1);
  client.publish("termostt/status/humidity", msg_buffer);

  double pmv_index = calcPMV(DHT.temperature, DHT.humidity, met, clo);
  pub_str = String(pmv_index);
  pub_str.toCharArray(msg_buffer, pub_str.length() + 1);
  client.publish("termostt/status/pmv", msg_buffer);
}

void turnLED(byte state, byte led) {
  if (state == ON)
    digitalWrite(led, HIGH);
  else
    digitalWrite(led, LOW);
}

// handles message arrived on subscribed topic(s)
void callback(char* topic, byte* payload, unsigned int length) {
  byte i;

  // create character buffer with ending null terminator (string)
  for(i=0; i<length; i++) {
    msg_buffer[i] = payload[i];
  }
  msg_buffer[i] = '\0';

  String tpc_str = String(topic);

  if (tpc_str.equals("termostt/mode")) {
    setMode();
  }
  else if (tpc_str.equals("termostt/params")) {
    setParams();
  }
}

void setMode() {
  String msg_str = String(msg_buffer);

  if (msg_str.equals("mode:IDLE")) {
    mode = MODE_I;
  }
  else if (msg_str.equals("mode:MONITOR")) {
    mode = MODE_M;
  }
}

void setParams() {
  String msg_str = String(msg_buffer);

  if (msg_str.startsWith("met:")) {
    met = strtod(&msg_str[4], NULL);
    #if defined(DEVMODE)
      Serial.println("PARAMS met: " + String(met));
    #endif
  }
  else if (msg_str.startsWith("clo:")) {
    clo = strtod(&msg_str[4], NULL);
    #if defined(DEVMODE)
      Serial.println("PARAMS clo: " + String(clo));
    #endif
  }
}

void recv() {
  if (irrecv.decode(&results)) {
    turnLED(ON, STT_PIN);
    storeCode(&results);
    irrecv.resume(); // resume receiver
    turnLED(OFF, STT_PIN);
  }
}

// Enviar sinal IR para o Arduino Nano
void sendInfraredEvent(byte type, byte len, byte t) {
  IRsignal.type = type;
  IRsignal.len = len;
  IRsignal.temperature = t;
  ET.sendData();
  delay(500);
}

// Stores the code for later playback
void storeCode(decode_results *results) {
  codeType = results->decode_type;
  int count = results->rawlen;
  if (codeType == UNKNOWN) {
    Serial.println("Received unknown code, saving as raw");
    codeLen = results->rawlen - 1;
    // To store raw codes:
    // Drop first value (gap)
    // Convert from ticks to microseconds
    // Tweak marks shorter, and spaces longer to cancel out IR receiver distortion
    for (int i = 1; i <= codeLen; i++) {
      if (i % 2) {
        // Mark
        rawCodes[i - 1] = results->rawbuf[i]*USECPERTICK - MARK_EXCESS;
        Serial.print(" m");
      } 
      else {
        // Space
        rawCodes[i - 1] = results->rawbuf[i]*USECPERTICK + MARK_EXCESS;
        Serial.print(" s");
      }
      Serial.print(rawCodes[i - 1], DEC);
    }
    Serial.println("");
  }
  else {
    if (codeType == NEC) {
      Serial.print("Received NEC: ");
      if (results->value == REPEAT) {
        // Don't record a NEC repeat value as that's useless.
        Serial.println("repeat; ignoring.");
        return;
      }
    } 
    else if (codeType == SONY) {
      Serial.print("Received SONY: ");
    } 
    else if (codeType == RC5) {
      Serial.print("Received RC5: ");
    } 
    else if (codeType == RC6) {
      Serial.print("Received RC6: ");
    } 
    else if (codeType == LG) {
      Serial.print("Received LG: ");
    } 
    else {
      Serial.print("Unexpected codeType ");
      Serial.print(codeType, DEC);
      Serial.println("");
    }
    Serial.println(results->value, HEX);
    codeValue = results->value;
    Serial.println(String(results->bits) + " bits");
    codeLen = results->bits;
    //Serial.println((0x8808F4B - 0x101), HEX);
  }
}

void sendCode(byte t) {
  sendInfraredEvent(codeType, codeLen, t);
}

double calcPMV(double temperature, double humidity, double met, double clo) {
  double M,Ta,Tr,p,w,v,rh,Tsk,
  fcl,W,vp,Icl,Iclr,Pa,Tcl,hc,hr,
  PMV,Ia,factor,Balance,R,C,Hres,
  E,Ediff,S,ArAdu,DLEminimal = 1;
  M = met;
  W = 0;
  Ta = temperature;
  Tr = temperature;
  v = 0.1;
  rh = humidity;
  Icl = clo;
  if (M<=58) {
    M=58;
  }
  if (M>=232) {
    M=232;
  }
  if (Ta<=10) {
    Ta=10;
  }
  // Calculation of stationary w (m/s), NOT used
  if (w<=0.0052*(M-58)) {
    w=0.0052*(M-58);
  }
  if (w>=1.2) {
    w=1.2;
  }
  if (v<=0.1) {
    v=0.1;
  }
  if (v>=4) {
    v=4;
  }
  Icl=Icl*0.155;
  Ia=0.092*exp(-0.15*v-0.22*w)-0.0045;
  Tsk=35.7-0.0285*M;

  // Calculation of Pa (Pa)
  Pa=(rh/100)*0.1333*exp(18.6686-4030.183/(Ta+235));

  // *** Calculation of Dlimneutral and Dlimminimal ***
  // Calculation of S (W/m2),fcl (n.d.), hr W/m2C with stepwise iteration
  Tcl=Ta; hr=3; S=0; ArAdu=0.77; factor=500; Iclr=Icl; // Initial values !
  do {
    fcl=1.05+0.65*Icl;
    E=0.42*((M-W)-58);
    Ediff=3.05*(0.255*Tsk-3.36-Pa);
    Hres=1.73E-2*M*(5.867-Pa)+1.4E-3*M*(34-Ta);
    Tcl=Tsk-Icl*(M-W-E-Ediff-Hres-S);
    hr=5.67E-8*0.95*ArAdu*(exp(4*log(273+Tcl))-exp(4*log(273+Tr)))/(Tcl-Tr);
    hc=12.1*pow(v,0.5);
    R=fcl*hr*(Tcl-Tr);
    C=fcl*hc*(Tcl-Ta);
    Balance=M-W-E-Ediff-Hres-R-C-S;
    if (Balance>0)  {
      S=S+factor;
      factor=factor/2;
    }
    else {
      S=S-factor;
    }
  } while (abs(Balance) > 0.01);
  S=M-W-E-Ediff-Hres-R-C;

  PMV=(0.303*exp(-0.036*M)+0.028)*S;

  #if defined(DEVMODE)
    Serial.println("/*");
    Serial.println("** CALC PMV t: " + String(temperature));
    Serial.println("** CALC PMV h: " + String(humidity));
    Serial.println("** CALC PMV pmv: " + String(PMV));
    Serial.println("*/");
  #endif

  return PMV;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
